#include <iostream>
using namespace std;

class Node
{
	
	public:
		
	int data;
	Node *next;
	
	Node()
	{
		data=0;
		next=0;
		
	}
	
	
	Node(int data)
	{
		this->data=data;
		this->next=0;
	}
	
};

class LinkedList
{
	
	public:
	Node *head;
	
	LinkedList()
	{
		head=0;
	}
	
	LinkedList(Node *n)
	{
	    head=n;
	
		
	}
	
	void Insert_Tail( int value)
	{
		Node *iterator = head;
		Node *next_Node;
		next_Node= new Node(value);
		
		if(head==0)
		{
		
	        //	head=next_Node;
		        head=next_Node;
		}
		
		else
		{
			
				while(iterator->next!=0)
	            {
	    	         iterator=iterator->next;
		        }
		
		        iterator->next=next_Node;
		        
		        
		}
	
		
	}
	
    void DeleteLastNode()
    {
    	if (head == NULL) {
        cout << "Element not present in the list\n";	
        }
        if (head->next == NULL) 
		{
        delete head;
        
        }
    
    	Node *iterator = head;
    	
    	while(iterator->next->next!=0)
	        {
	        	 
	    	      iterator=iterator->next;
		    }
		    
		delete (iterator->next);
		    
		iterator->next=0;
		    
	
    }
	 
	void DeleteAnyNode(int position)
{
    if (head == 0)
    {
        cout << "List is empty. Cannot delete a node.\n";
        return;
    }

    if (position == 0)
    {
        Node* temp = head;
        head = head->next;
        delete temp;
        return;
    }

    Node* iterator = head;
    int i = 0;

    while (iterator->next != 0 && i < position - 1)
    {
        i++;
        iterator = iterator->next;
    }

    if (iterator->next == 0)
    {
        cout << "Position exceeds the length of the list. Cannot delete a node.\n";
        return;
    }

    Node* toDelete = iterator->next;
    iterator->next = iterator->next->next;
    delete toDelete;
}
	
   

	void Display()
	{
		Node * iterator=head;
		while(iterator!=0)
		{
			cout<<iterator->data<<" ";
			iterator=iterator->next;
		}
	}
	
	//getting node to inserting new node  after this node
	Node* get_Node()
	{
		int count=0;
		
		Node * iterator=head;
		while(count<1)
		{
			iterator=iterator->next;
			count++;
		}
		return iterator;
	
	}
		
};

int main()
{
		Node n(4);
    	LinkedList LL(&n);
    	
        
        LL.Insert_Tail(1);
        LL.Insert_Tail(5);
        LL.Insert_Tail(7);
        LL.Insert_Tail(2);
        
        cout<<"Linked List Before Deleting last node:\n";
    	LL.Display();
	
	    LL.DeleteLastNode();
	    //LL.DeleteAnyNode();
	    
	    cout<<"\n\nLinked List After Deleting last node:\n";
    	LL.Display();
    	
    	LL.DeleteAnyNode(1);
    	
    	cout<<"\n\nLinked List After Deleting 3rd node:\n";
    	LL.Display();
    	
	
	
	return 0;
}
