#include <iostream>
using namespace std;

class Node
{
	
	public:
		
	int data;
	Node *next;
	
	Node()
	{
		data=0;
		next=0;
		
	}
	
	
	Node(int data)
	{
		this->data=data;
		this->next=0;
	}
	
};

class LinkedList
{
	
	public:
	Node *head;
	
	LinkedList()
	{
		head=0;
	}
	
	LinkedList(Node *n)
	{
	    head=n;
	
		
	}
	
	void Insert_Tail( int value)
	{
		Node *iterator = head;
		Node *next_Node;
		next_Node= new Node(value);
		
		if(head==0)
		{
		
	        //	head=next_Node;
		        head=next_Node;
		}
		
		else
		{
			
				while(iterator->next!=0)
	            {
	    	         iterator=iterator->next;
		        }
		
		        iterator->next=next_Node;
		        
		        
		}
	
		
	}
	
	void InsertAfterNode(Node *n,int value)
	{

        if (n == NULL)  
    {  
        cout << "the given previous node cannot be NULL";  
        return;  
    } 
       
		Node * new_Node;
		new_Node= new Node(value);
		new_Node->next =n->next;
		n->next=new_Node;        
		     
		
	}

	void Display()
	{
		Node * iterator=head;
		while(iterator!=0)
		{
			cout<<iterator->data<<" ";
			iterator=iterator->next;
		}
	}
	
	//getting node to inserting new node  after this node
	Node* get_Node()
	{
		int count=0;
		
		Node * iterator=head;
		while(count<1)
		{
			iterator=iterator->next;
			count++;
		}
		return iterator;
	
	}
		
};

int main()
{
		Node n(4);
    	LinkedList LL(&n);
    	
        
        LL.Insert_Tail(1);
        LL.Insert_Tail(5);
        LL.Insert_Tail(7);
        LL.Insert_Tail(2);
        
        cout<<"Linked List before inserting:\n";
        LL.Display();
        
        //inserting after node 3
        Node *temp= LL.get_Node();
        LL.InsertAfterNode(temp,3);
        
        cout<<"\n\nLinked List after inserting:\n";
    	LL.Display();
	
	
	
	return 0;
}
